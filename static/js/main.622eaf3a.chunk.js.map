{"version":3,"sources":["redux/actions/index.js","redux/reducers/search.js","redux/reducers/item.js","redux/reducers/cart.js","redux/reducers/index.js","history.js","utils.js","pages/search/SearchPage.js","pages/results/ResultsPage.js","pages/cart/CartPage.js","pages/checkout/CheckoutPage.js","pages/confirmation/ConfirmationPage.js","pages/arrival/ArrivalPage.js","pages/rating/RatingPage.js","pages/details/DetailsPage.js","App.js","serviceWorker.js","index.js"],"names":["types","addItemToCart","item","type","clearCart","search","state","input","color","sizes","occasions","action","size","occasion","title","store","price","imageAlt","this","cart","combineReducers","createBrowserHistory","swapPage","route","history","push","Search","dispatch","useDispatch","colorRadio","useRadioState","sizeCheckbox","useCheckboxState","occasionCheckbox","form","useFormState","values","onSubmit","updateSearchValues","Fragment","Form","FormLabel","name","FormInput","placeholder","RadioGroup","aria-label","Radio","value","Checkbox","FormSubmitButton","Results","searchState","useSelector","stores","resultsArr","i","length","Math","floor","random","console","log","_getDetails","result","renderResults","map","key","Clickable","tabIndex","onClick","alt","src","Button","_addToCart","Separator","Cart","cartState","newest","headerStr","_deleteItem","itemIndex","findIndex","cartItem","newCart","concat","splice","Box","Checkout","sizeRaido","totalPrice","reduce","acc","val","parseInt","replace","deliveryDetails","orderTotal","freeBackupSize","Confirmation","setTimeout","dialog","useDialogState","DialogDisclosure","DialogBackdrop","Dialog","hide","Arrival","Rating","ratingRadio","feedbackCheckbox","Details","itemState","App","path","exact","component","React","Component","withRouter","Boolean","window","location","hostname","match","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0NAAaA,EACa,uBADbA,EAEY,sBAFZA,EAGS,mBAHTA,EAIG,cAJHA,EAKc,wBAKdC,EAAgB,SAAAC,GAAI,MAAK,CAACA,OAAMC,KAAMH,IACtCI,EAAY,iBAAO,CAACD,KAAMH,ICWtBK,EApBF,WAKA,IALCC,EAKF,uDALU,CACpBC,MAAO,QACPC,MAAO,OACPC,MAAO,CAAE,KAAM,IAAK,IAAK,IAAK,MAC9BC,UAAW,CAAE,SAAU,SAAU,WAAY,WAAY,QAAS,aACnEC,EAAW,uCACV,OAAQA,EAAOR,MACb,KAAKH,EACH,OAAO,eACFM,EADL,CAEIC,MAAOI,EAAOJ,MACdC,MAAOG,EAAOH,MACdC,MAAOE,EAAOC,KACdF,UAAWC,EAAOE,WAExB,QACE,OAAOP,ICGEJ,EAnBJ,WAOE,IAPDI,EAOA,uDAPQ,CAClBJ,KAAM,CACJY,MAAO,oBACPC,MAAO,SACPC,MAAO,SACPC,SAAU,WAAc,MAAM,cAAN,OAAqBC,KAAKJ,UAErDH,EAAW,uCACV,OAAQA,EAAOR,MACb,KAAKH,EACH,OAAO,eACFM,EADL,CAEEJ,KAAMS,EAAOT,OAEjB,QACE,OAAOI,I,QCGEa,EAlBJ,WAAyB,IAAxBb,EAAuB,uDAAf,GAAIK,EAAW,uCACjC,OAAQA,EAAOR,MACb,KAAKH,EACH,MAAM,GAAN,mBACKM,GADL,gBAGOK,EAAOT,QAGhB,KAAKF,EACH,MAAO,GACT,KAAKA,EACD,OAAOW,EAAOQ,KAClB,QACE,OAAOb,ICXAc,cAAgB,CAC7Bf,SACAH,OACAiB,S,QCNaE,gB,wICAR,SAASC,EAASC,GACrBC,EAAQC,KAAKF,GCgBF,SAASG,IACtB,IAAMC,EAAWC,cACXC,EAAaC,YAAc,CAAExB,MAAO,QACpCyB,EAAeC,YAAiB,CAAE1B,MAAO,CAAC,KAAM,IAAK,IAAK,IAAK,QAC/D2B,EAAmBD,YAAiB,CAAE1B,MAAO,CAAE,SAAU,SAAU,WAAY,WAAY,QAAS,cACpG4B,EAAOC,YAAa,CACzBC,OAAQ,CAAE/B,OAAQ,IAClBgC,SAAU,SAACD,GACTA,EAAS,CACP7B,MAAO6B,EAAO/B,OACdG,MAAOqB,EAAWvB,MAClBM,KAAMmB,EAAazB,MACnBO,SAAUoB,EAAiB3B,OAE7BqB,EPzB6B,SAAAS,GAAM,sBAAUA,EAAV,CAAkBjC,KAAMH,IOyBlDsC,CAAmBF,IAC5Bd,EAAS,cAIZ,OACE,kBAAC,IAAMiB,SAAP,KACE,wCACA,kBAACC,EAAA,EAASN,EACR,kBAACO,EAAA,EAAD,iBAAeP,EAAf,CAAqBQ,KAAK,WAA1B,UAGA,kBAACC,EAAA,EAAD,iBAAeT,EAAf,CAAqBQ,KAAK,SAASE,YAAY,WAC/C,sCACA,kCACE,kBAACC,EAAA,EAAD,iBAAiBhB,EAAjB,CAA8BiB,aAAW,iBACvC,+BACE,kBAACC,EAAA,EAAD,iBAAYlB,EAAZ,CAAyBmB,MAAM,SADjC,QAGA,+BACE,kBAACD,EAAA,EAAD,iBAAYlB,EAAZ,CAAyBmB,MAAM,YADjC,WAGA,+BACE,kBAACD,EAAA,EAAD,iBAAYlB,EAAZ,CAAyBmB,MAAM,YADjC,WAGA,+BACE,kBAACD,EAAA,EAAD,iBAAYlB,EAAZ,CAAyBmB,MAAM,WADjC,UAGA,+BACE,kBAACD,EAAA,EAAD,iBAAYlB,EAAZ,CAAyBmB,MAAM,UADjC,SAGA,+BACE,kBAACD,EAAA,EAAD,iBAAYlB,EAAZ,CAAyBmB,MAAM,YADjC,aAMJ,oCACA,kCACE,+BACE,kBAACC,EAAA,EAAD,iBAAclB,EAAd,CAA4BiB,MAAM,QADpC,WAIA,+BACE,kBAACC,EAAA,EAAD,iBAAclB,EAAd,CAA4BiB,MAAM,OADpC,SAIA,+BACE,kBAACC,EAAA,EAAD,iBAAclB,EAAd,CAA4BiB,MAAM,OADpC,UAIA,+BACE,kBAACC,EAAA,EAAD,iBAAclB,EAAd,CAA4BiB,MAAM,OADpC,SAIA,+BACE,kBAACC,EAAA,EAAD,iBAAclB,EAAd,CAA4BiB,MAAM,QADpC,YAMF,wCACA,kCACE,+BACE,kBAACC,EAAA,EAAD,iBAAchB,EAAd,CAAgCe,MAAM,YADxC,UAIA,+BACE,kBAACC,EAAA,EAAD,iBAAchB,EAAd,CAAgCe,MAAM,YADxC,UAIA,+BACE,kBAACC,EAAA,EAAD,iBAAchB,EAAd,CAAgCe,MAAM,cADxC,YAIA,+BACE,kBAACC,EAAA,EAAD,iBAAchB,EAAd,CAAgCe,MAAM,cADxC,aAIA,+BACE,kBAACC,EAAA,EAAD,iBAAchB,EAAd,CAAgCe,MAAM,WADxC,SAIA,+BACE,kBAACC,EAAA,EAAD,iBAAchB,EAAd,CAAgCe,MAAM,cADxC,aAKF,kBAACE,EAAA,EAAqBhB,EAAtB,Q,6BClHO,SAASiB,IAMpB,IALA,IAAMC,EAAcC,aAAY,SAAA/C,GAAK,OAAIA,EAAMD,UACzCsB,EAAWC,cACb0B,EAAS,CAAE,SAAU,WAAY,YAAa,QAAS,gBAAiB,WACxEC,EAAa,GAERC,EAAI,EAAGA,GAAK,GAAIA,IACrBD,EAAW9B,KAAK,CACZX,MAAM,GAAD,OAAKsC,EAAY5C,MAAjB,YAA0B4C,EAAY1C,UAAU+C,OAASL,EAAY1C,UAAUgD,KAAKC,MAAMD,KAAKE,SAAWR,EAAY1C,UAAU+C,SAAW,GAA3I,YAAiJL,EAAY7C,OAAS,SAC3KQ,MAAOuC,EAAOI,KAAKC,MAAMD,KAAKE,SAAWN,EAAOG,SAChD7C,KAAMwC,EAAY3C,MAAMiD,KAAKC,MAAMD,KAAKE,SAAWR,EAAY3C,MAAMgD,SACrEzC,MAAM,IAAD,QAAO0C,KAAKC,MAAsB,IAAhBD,KAAKE,UAAoB,GAAG,KACnD3C,SAAU,WAAc,MAAM,cAAN,OAAqBC,KAAKJ,UAEtD+C,QAAQC,IAAIP,GAGhB,IAAIQ,EAAc,SAACC,GACfrC,ERhBkC,CAAEzB,KQgBT8D,ERhBe7D,KAAMH,IQiBhDsB,EAAS,YAUT2C,EAAgBV,EAAWW,KAAI,SAACF,EAAQR,GACxC,OACI,kBAAC,IAAMjB,SAAP,CAAiB4B,IAAMH,EAAOlD,MAAQ0C,GAClC,kBAACY,EAAA,EAAD,CAAWC,SAAUb,EAAE,EAAGc,QAAS,WAAKP,EAAYC,KAChD,yBAAKO,IAAKP,EAAO/C,WAAYuD,IAAI,KACjC,gCAAMR,EAAOlD,MAAb,KACA,gCAAMkD,EAAOjD,MAAb,KACA,sCAAYiD,EAAOpD,KAAnB,KACA,gCAAMoD,EAAOhD,MAAb,MAEJ,kBAACyD,EAAA,EAAD,CAAQJ,SAAUb,EAAE,EAAGc,QAAS,YAjB3B,SAACN,GACdrC,EAAS1B,EAAc+D,IACvB1C,EAAS,QAeoCoD,CAAWV,KAAhD,oBAKZ,OACI,kBAAC,IAAMzB,SAAP,KACI,uCACE0B,EACF,kBAACU,EAAA,EAAD,MACA,kBAACF,EAAA,EAAD,CAAQH,QAtBG,WAAQhD,EAAS,YAsB5B,kB,WCjDG,SAASsD,IACpB,IAAMjD,EAAWC,cACXiD,EAAYxB,aAAY,SAAA/C,GAAK,OAAIA,EAAMa,QACvC2D,EAASD,EAAUA,EAAUpB,OAAQ,GACrCsB,EAAYD,GAAUA,EAAOhE,MAAjB,UAA4BgE,EAAOhE,MAAnC,wBAAiE,GAE/EkE,EAAc,SAAC9E,GACf,IAAI+E,EAAYJ,EAAUK,WAAU,SAAAC,GAAQ,OAAKA,EAASrE,QAAUZ,EAAKY,SACrEsE,EAAUP,EAAUQ,SACxBD,EAAQE,OAAOL,EAAW,GAC1BtD,ETLmC,CAAER,KSKTiE,ETLejF,KAAMH,ISMjDsB,EAAS,SAGT2C,EAAgBY,EAAUX,KAAI,SAAChE,EAAMsD,GACrC,OACI,kBAAC,IAAMjB,SAAP,CAAgB4B,IAAMjE,EAAKY,MAAQ0C,GAC/B,kBAAC+B,EAAA,EAAD,CAAKlB,SAAUb,EAAE,EAAGc,QAAS,cACzB,yBAAKC,IAAKrE,EAAKe,WAAYuD,IAAI,KAC/B,gCAAMtE,EAAKY,MAAX,KACA,gCAAMZ,EAAKa,MAAX,KACA,gCAAMb,EAAKc,MAAX,MAEJ,kBAACyD,EAAA,EAAD,CAAQJ,SAAUb,EAAE,EAAGc,QAAS,WAAOU,EAAY9E,KAAnD,cAKZ,OACI,kBAAC,IAAMqC,SAAP,KACI,wBAAI8B,SAAU,GAAd,QACA,wBAAIA,SAAU,GAAIU,GAClB,kBAACN,EAAA,EAAD,CAAQJ,SAAU,EAAGC,QAAS,WAAMhD,EAAS,YAA7C,iBACA,kBAACmD,EAAA,EAAD,CAAQJ,SAAU,EAAGC,QAAS,WAAMhD,EAAS,cAA7C,YACC2C,GC7BE,SAASuB,IACpB,IAAMX,EAAYxB,aAAY,SAAA/C,GAAK,OAAIA,EAAMa,QACvCsE,EAAY3D,YAAc,CAAExB,MAAO,KAErC2D,EAAgBY,EAAUX,KAAI,SAAChE,EAAMsD,GACrC,OACI,kBAAC,IAAMjB,SAAP,CAAiB4B,IAAMjE,EAAKY,MAAQ0C,GAChC,kBAAC+B,EAAA,EAAD,CAAKlB,SAAUb,EAAE,EAAGc,QAAS,cACzB,yBAAKC,IAAKrE,EAAKe,WAAYuD,IAAI,KAC/B,gCAAMtE,EAAKY,MAAX,KACA,gCAAMZ,EAAKa,MAAX,KACA,gCAAMb,EAAKc,MAAX,UAOZ0E,EAAab,EAAUc,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAME,SAASD,EAAI7E,MAAM+E,QAAQ,MAAM,OAfpE,MAiBhBC,EACA,kBAAC,IAAMzD,SAAP,KACI,4CACA,gCApBY,OAuBhB0D,EACA,kBAAC,IAAM1D,SAAP,KACI,2CACA,gCAAMmD,IAGVQ,EACA,kBAAC,IAAM3D,SAAP,KACI,gDACA,kCACA,kBAACM,EAAA,EAAD,iBAAiB4C,EAAjB,CAA6B3C,aAAW,cACpC,+BACI,kBAACC,EAAA,EAAD,iBAAY0C,EAAZ,CAAwBzC,MAAM,QADlC,YAGA,+BACI,kBAACD,EAAA,EAAD,iBAAY0C,EAAZ,CAAwBzC,MAAM,OADlC,UAGA,+BACI,kBAACD,EAAA,EAAD,iBAAY0C,EAAZ,CAAwBzC,MAAM,OADlC,WAGA,+BACI,kBAACD,EAAA,EAAD,iBAAY0C,EAAZ,CAAwBzC,MAAM,OADlC,UAGA,+BACI,kBAACD,EAAA,EAAD,iBAAY0C,EAAZ,CAAwBzC,MAAM,QADlC,eAMZ,OACI,kBAAC,IAAMT,SAAP,KACI,wBAAI8B,SAAU,GAAd,YACCJ,EACA+B,EACAC,EACD,kBAACtB,EAAA,EAAD,MACCuB,EACD,kBAACzB,EAAA,EAAD,CAAQH,QAAS,WAAMhD,EAAS,kBAAhC,gB,uCC7DG,SAAS6E,IACpBC,YAAW,WACP9E,EAAS,aACV,KACH,IAAMK,EAAWC,cACXyE,EAASC,cAWf,OACI,kBAAC,IAAM/D,SAAP,KACI,kBAACgD,EAAA,EAAD,CAAKlB,SAAU,GACX,4CACA,yDACA,qFACA,2EAEJ,kBAACI,EAAA,EAAD,CAAQH,QAXC,WACbhD,EAAS,cAUL,cACA,oCACI,kBAACiF,EAAA,EAAqBF,EAAtB,gBACA,kBAACG,EAAA,EAAmBH,EAChB,kBAACI,EAAA,EAAD,iBAAYJ,EAAZ,CAAoBhC,SAAU,EAAGvB,aAAW,iBACxC,4CACA,6GACA,kBAAC2B,EAAA,EAAD,CAAQH,QAxBT,WACf+B,EAAOK,OACP/E,EAASvB,KACTkB,EAAS,YAqBO,oBCtCT,SAASqF,IACpB,OACI,kBAAC,IAAMpE,SAAP,KACI,kBAACgD,EAAA,EAAD,KACI,uCACA,0DACA,8HAEJ,kBAACd,EAAA,EAAD,qBACA,kBAACA,EAAA,EAAD,CAAQH,QAAS,WAAOhD,EAAS,YAAjC,qBCEG,SAASsF,KACtB,IAAMjF,EAAWC,cACXiF,EAAc/E,YAAc,CAAExB,MAAO,KACrCwG,EAAmB9E,YAAiB,CAAE1B,MAAO,KAC7C+F,EAASC,cAQb,OACI,kBAAC,IAAM/D,SAAP,KACE,wCACA,kBAACM,EAAA,EAAD,iBAAiBgE,EAAjB,CAA+B/D,aAAW,gBACxC,+BACE,kBAACC,EAAA,EAAD,iBAAY8D,EAAZ,CAA0B7D,MAAM,SADlC,MAGA,+BACE,kBAACD,EAAA,EAAD,iBAAY8D,EAAZ,CAA0B7D,MAAM,SADlC,MAGA,+BACE,kBAACD,EAAA,EAAD,iBAAY8D,EAAZ,CAA0B7D,MAAM,WADlC,MAGA,+BACE,kBAACD,EAAA,EAAD,iBAAY8D,EAAZ,CAA0B7D,MAAM,UADlC,MAGA,+BACE,kBAACD,EAAA,EAAD,iBAAY8D,EAAZ,CAA0B7D,MAAM,UADlC,OAIJ,uDACA,kCACE,+BACE,kBAACC,EAAA,EAAD,iBAAc6D,EAAd,CAAgC9D,MAAM,cADxC,YAIA,+BACE,kBAACC,EAAA,EAAD,iBAAc6D,EAAd,CAAgC9D,MAAM,UADxC,QAIA,+BACE,kBAACC,EAAA,EAAD,iBAAc6D,EAAd,CAAgC9D,MAAM,aADxC,WAIA,+BACE,kBAACC,EAAA,EAAD,iBAAc6D,EAAd,CAAgC9D,MAAM,iBADxC,YAKF,oCACE,kBAACuD,EAAA,EAAqBF,EAAtB,eACA,kBAACG,EAAA,EAAmBH,EAChB,kBAACI,EAAA,EAAD,iBAAYJ,EAAZ,CAAoBhC,SAAU,EAAGvB,aAAW,gBACxC,4CACA,iEACA,kBAAC2B,EAAA,EAAD,CAAQH,QAnDX,WACX+B,EAAOK,OACP/E,EAASvB,KACTkB,EAAS,YAgDK,wBCpEH,SAASyF,KACpB,IAAMC,EAAY3D,aAAY,SAAA/C,GAAK,OAAIA,EAAMJ,QACvCA,EAAO8G,EAAU9G,KACjByB,EAAWC,cACjBiC,QAAQC,IAAIkD,GAMZ,OACI,kBAAC,IAAMzE,SAAP,KACI,4CACA,yBAAKgC,IAAKrE,EAAKe,WAAYuD,IAAI,KAC/B,gCAAMtE,EAAKY,MAAX,KACA,gCAAMZ,EAAKa,MAAX,KACA,sCAAYb,EAAKU,KAAjB,KACA,gCAAMV,EAAKc,MAAX,KACA,0CAAiB0C,KAAKC,MAAsB,IAAhBD,KAAKE,WACjC,2CACA,4dACA,kBAACa,EAAA,EAAD,CAAQH,QAAS,WAdvB3C,EAAS1B,EAc8BC,IAbvCoB,EAAS,UAaH,gBACA,kBAACmD,EAAA,EAAD,CAAQH,QAAS,WAAKhD,EAAS,aAA/B,sB,WCXN2F,G,uKAEF,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UAAUC,OAAO,EAAMC,UAAW1F,IAC9C,kBAAC,IAAD,CAAOwF,KAAK,WAAWC,OAAO,EAAMC,UAAWjE,IAC/C,kBAAC,IAAD,CAAO+D,KAAK,WAAWC,OAAO,EAAMC,UAAWL,KAC/C,kBAAC,IAAD,CAAOG,KAAK,QAAQC,OAAO,EAAMC,UAAWxC,IAC5C,kBAAC,IAAD,CAAOsC,KAAK,YAAYC,OAAO,EAAMC,UAAW5B,IAChD,kBAAC,IAAD,CAAO0B,KAAK,gBAAgBC,OAAO,EAAMC,UAAWjB,IACpD,kBAAC,IAAD,CAAOe,KAAK,WAAWC,OAAO,EAAMC,UAAWT,IAC/C,kBAAC,IAAD,CAAOO,KAAK,UAAUC,OAAO,EAAMC,UAAWR,U,GAXpCS,IAAMC,WAiBTC,eAAWN,ICvBNO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCHN,IAAM7G,GAAQ8G,YACZC,EACAL,OAAOM,8BAAgCN,OAAOM,gCAGhDC,IAASC,OACP,kBAAC,IAAD,CAAQzG,QAASA,GACf,kBAAC,IAAD,CAAUT,MAAOA,IACf,kBAAC,IAAMmH,WAAP,KACE,kBAAC,GAAD,SAINC,SAASC,eAAe,SDuGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/E,QAAQ+E,MAAMA,EAAMC,a","file":"static/js/main.622eaf3a.chunk.js","sourcesContent":["export const types = {\n    UPDATE_SEARCH_VALUES: 'UPDATE_SEARCH_VALUES',\n    UPDATE_CURRENT_ITEM: 'UPDATE_CURRENT_ITEM',\n    ADD_ITEM_TO_CART: 'ADD_ITEM_TO_CART',\n    CLEAR_CART: 'CLEAR_CART ',\n    REMOVE_ITEM_FROM_CART: 'REMOVE_ITEM_FROM_CART'\n}\n\nexport const updateSearchValues = values => ({ ...values, type: types.UPDATE_SEARCH_VALUES});\nexport const updateCurrentItem = item => ({ item, type: types.UPDATE_CURRENT_ITEM});\nexport const addItemToCart = item => ({item, type: types.ADD_ITEM_TO_CART});\nexport const clearCart = () => ({type: types.CLEAR_CART});\nexport const removeItemFromCart = cart => ({ cart, type: types.REMOVE_ITEM_FROM_CART })","import { types } from '../actions';\n\nconst search = (state = {\n    input: 'shirt',\n    color: 'blue',\n    sizes: [ 'xs', 's', 'm', 'l', 'xl' ],\n    occasions: [ 'formal', 'casual', 'cocktail', 'back-tie', 'sport', 'business' ]\n}, action) => {\n    switch (action.type) {\n      case types.UPDATE_SEARCH_VALUES:\n        return {\n          ...state,\n            input: action.input,\n            color: action.color,\n            sizes: action.size,\n            occasions: action.occasion\n        }\n      default:\n        return state\n    }\n  }\n\n  export default search","import { types } from '../actions';\n\nconst item = (state = {\n    item: {\n      title: 'blue casual shirt',\n      store: 'Target',\n      price: '$24.99',\n      imageAlt: function () { return `Image of a ${this.title}` }\n    }\n}, action) => {\n    switch (action.type) {\n      case types.UPDATE_CURRENT_ITEM:\n        return {\n          ...state,\n          item: action.item\n        }\n      default:\n        return state\n    }\n  }\n\n  export default item","import { types } from '../actions';\n\nconst cart = (state = [], action) => {\n    switch (action.type) {\n      case types.ADD_ITEM_TO_CART:\n        return [\n          ...state,\n          {\n            ...action.item\n          }\n        ]\n      case types.CLEAR_CART:\n        return []\n      case types.REMOVE_ITEM_FROM_CART:\n          return action.cart\n      default:\n        return state\n    }\n  }\n\n  export default cart","import { combineReducers } from 'redux'\nimport search from './search'\nimport item from './item'\nimport cart from './cart'\n\nexport default combineReducers({\n  search, \n  item,\n  cart\n})","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","import history from './history';\n\nexport function swapPage(route) {\n    history.push(route);\n}  ","import React from 'react';\n\nimport {\n  useRadioState,\n  Radio,\n  RadioGroup,\n  useCheckboxState,\n  Checkbox,\n  unstable_useFormState as useFormState,\n  unstable_Form as Form,\n  unstable_FormLabel as FormLabel,\n  unstable_FormInput as FormInput,\n  unstable_FormSubmitButton as FormSubmitButton,\n  } from \"reakit\";\n\nimport { useDispatch } from \"react-redux\";\nimport { updateSearchValues } from '../../redux/actions';\nimport { swapPage } from '../../utils';\n\nexport default function Search() {\n  const dispatch = useDispatch();\n  const colorRadio = useRadioState({ state: 'red' });\n  const sizeCheckbox = useCheckboxState({ state: ['xs', 's', 'm', 'l', 'xl'] });\n  const occasionCheckbox = useCheckboxState({ state: [ 'formal', 'casual', 'cocktail', 'back-tie', 'sport', 'business' ] });\n  const form = useFormState({\n   values: { search: \"\" },\n   onSubmit: (values) => {\n     values = {\n       input: values.search,\n       color: colorRadio.state,\n       size: sizeCheckbox.state,\n       occasion: occasionCheckbox.state\n     }\n     dispatch(updateSearchValues(values));\n     swapPage('results');\n   },\n });\n\n  return (\n    <React.Fragment>\n      <h1> SEARCH </h1>\n      <Form {...form}>\n        <FormLabel {...form} name=\"search\">\n          Search\n        </FormLabel>\n        <FormInput {...form} name=\"search\" placeholder=\"Shirt\" />\n        <h2>Colors</h2>\n        <fieldset>\n          <RadioGroup { ...colorRadio } aria-label=\"shirt-colors\">\n            <label>\n              <Radio { ...colorRadio } value=\"red\" /> Red\n            </label>\n            <label>\n              <Radio { ...colorRadio } value=\"orange\" /> Orange\n            </label>\n            <label>\n              <Radio { ...colorRadio } value=\"yellow\" /> Yellow\n            </label>\n            <label>\n              <Radio { ...colorRadio } value=\"green\" /> Green\n            </label>\n            <label>\n              <Radio { ...colorRadio } value=\"blue\" /> Blue\n            </label>\n            <label>\n              <Radio { ...colorRadio } value=\"purple\" /> Purple\n            </label>\n          </RadioGroup>\n        </fieldset>\n\n        <h2>Size</h2>\n        <fieldset>\n          <label>\n            <Checkbox {...sizeCheckbox} value=\"xs\" />\n            X-Small\n          </label>\n          <label>\n            <Checkbox {...sizeCheckbox} value=\"s\" />\n            Small\n          </label>\n          <label>\n            <Checkbox {...sizeCheckbox} value=\"m\" />\n            Medium\n          </label>\n          <label>\n            <Checkbox {...sizeCheckbox} value=\"l\" />\n            Large\n          </label>\n          <label>\n            <Checkbox {...sizeCheckbox} value=\"xl\" />\n            X-Large\n          </label>\n        </fieldset>\n\n        <h2>Occasion</h2>\n        <fieldset>\n          <label>\n            <Checkbox {...occasionCheckbox} value=\"formal\" />\n            Formal\n          </label>\n          <label>\n            <Checkbox {...occasionCheckbox} value=\"casual\" />\n            Casual\n          </label>\n          <label>\n            <Checkbox {...occasionCheckbox} value=\"cocktail\" />\n            Cocktail\n          </label>\n          <label>\n            <Checkbox {...occasionCheckbox} value=\"back-tie\" />\n            Black Tie\n          </label>\n          <label>\n            <Checkbox {...occasionCheckbox} value=\"sport\" />\n            Sport\n          </label>\n          <label>\n            <Checkbox {...occasionCheckbox} value=\"business\" />\n            Business\n          </label>\n        </fieldset>\n        <FormSubmitButton {...form}>Go</FormSubmitButton>\n      </Form>\n    </React.Fragment>\n  )\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Clickable, Button, Separator } from \"reakit\";\nimport { swapPage } from '../../utils';\nimport { useDispatch } from \"react-redux\";\nimport { updateCurrentItem, addItemToCart } from '../../redux/actions';\n\nexport default function Results() {\n    const searchState = useSelector(state => state.search);\n    const dispatch = useDispatch();\n    let stores = [ 'Target', 'Norstrom', 'Marshalls', 'Aerie', 'Bloomingdales', 'The Gap' ]\n    let resultsArr = [];\n\n    for (let i = 0; i <= 10; i++) {\n        resultsArr.push({\n            title: `${searchState.color} ${searchState.occasions.length ? searchState.occasions[Math.floor(Math.random() * searchState.occasions.length)] : ''} ${searchState.input || 'Shirt'}`,\n            store: stores[Math.floor(Math.random() * stores.length)],\n            size: searchState.sizes[Math.floor(Math.random() * searchState.sizes.length)],\n            price: `$${(Math.floor(Math.random() * 10000) + 1)/100}`,\n            imageAlt: function () { return `Image of a ${this.title}` }\n        })\n        console.log(resultsArr);\n    }\n\n    let _getDetails = (result) => {\n        dispatch(updateCurrentItem(result));\n        swapPage('details');\n    }\n\n    let _addToCart = (result) => {\n        dispatch(addItemToCart(result));\n        swapPage('cart');\n    }\n\n    let _searchAgain = () => { swapPage('search'); }\n\n    let renderResults = resultsArr.map((result, i) => {\n        return (\n            <React.Fragment  key= {result.title + i}>\n                <Clickable tabIndex={i+1} onClick={()=>{_getDetails(result)}}>\n                    <img alt={result.imageAlt()} src='' />\n                    <h3> {result.title} </h3>\n                    <h4> {result.store} </h4>\n                    <h4> Size: {result.size} </h4>\n                    <h4> {result.price} </h4>\n                </Clickable>\n                <Button tabIndex={i+1} onClick={()=>{_addToCart(result)}} >Reserve Item</Button>\n            </React.Fragment>\n\n        )\n    })\n    return (\n        <React.Fragment>\n            <h2>Results</h2>\n            { renderResults }\n            <Separator/>\n            <Button onClick={_searchAgain}>Adjust Search</Button>\n        </React.Fragment>\n    );\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Button, Box } from \"reakit\";\nimport { swapPage } from '../../utils';\nimport { useDispatch } from \"react-redux\";\nimport { removeItemFromCart } from '../../redux/actions';\n\nexport default function Cart() {\n    const dispatch = useDispatch();\n    const cartState = useSelector(state => state.cart);\n    const newest = cartState[cartState.length -1];\n    const headerStr = newest && newest.title ? `${newest.title} added to your cart!` : '';\n\n    let _deleteItem = (item) => {\n        let itemIndex = cartState.findIndex(cartItem => (cartItem.title === item.title));\n        let newCart = cartState.concat();\n        newCart.splice(itemIndex, 1);\n        dispatch(removeItemFromCart(newCart));\n        swapPage('cart');\n    }\n\n    let renderResults = cartState.map((item, i) => {\n        return (\n            <React.Fragment key= {item.title + i}>\n                <Box tabIndex={i+4} onClick={()=>{}}>\n                    <img alt={item.imageAlt()} src='' />\n                    <h3> {item.title} </h3>\n                    <h4> {item.store} </h4>\n                    <h4> {item.price} </h4>\n                </Box>\n                <Button tabIndex={i+4} onClick={() => {_deleteItem(item)}}>Delete</Button>\n            </React.Fragment>\n\n        )\n    });\n    return (\n        <React.Fragment>\n            <h1 tabIndex={0}>Cart</h1>\n            <h2 tabIndex={1}>{headerStr}</h2>\n            <Button tabIndex={2} onClick={()=>{ swapPage('search') }}>Keep Shopping</Button>\n            <Button tabIndex={3} onClick={()=>{ swapPage('checkout') }}>Checkout</Button>\n            {renderResults}\n        </React.Fragment>\n    )\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n    Button,\n    Box,\n    useRadioState,\n    Radio,\n    RadioGroup,\n    Separator,\n} from \"reakit\";\nimport { swapPage } from '../../utils';\n\nexport default function Checkout() {\n    const cartState = useSelector(state => state.cart);\n    const sizeRaido = useRadioState({ state: '' });\n    const deliveryFee = 4.99;\n    let renderResults = cartState.map((item, i) => {\n        return (\n            <React.Fragment  key= {item.title + i}>\n                <Box tabIndex={i+4} onClick={()=>{}}>\n                    <img alt={item.imageAlt()} src='' />\n                    <h3> {item.title} </h3>\n                    <h4> {item.store} </h4>\n                    <h4> {item.price} </h4>\n                </Box>\n            </React.Fragment>\n\n        )\n    });\n\n    let totalPrice = cartState.reduce((acc, val) => (acc + parseInt(val.price.replace(/\\$/g,\"\"))), deliveryFee);\n\n    let deliveryDetails =\n        <React.Fragment>\n            <h2>Delivery Fee</h2>\n            <h4>${deliveryFee}</h4>\n        </React.Fragment>\n\n    let orderTotal =\n        <React.Fragment>\n            <h2>Order Total</h2>\n            <h4>${totalPrice}</h4>\n        </React.Fragment>\n\n    let freeBackupSize =\n        <React.Fragment>\n            <h2>Free Backup Size</h2>\n            <fieldset>\n            <RadioGroup { ...sizeRaido } aria-label=\"free-size\">\n                <label>\n                    <Radio { ...sizeRaido } value=\"xs\" /> X-Small\n                </label>\n                <label>\n                    <Radio { ...sizeRaido } value=\"s\" /> Small\n                </label>\n                <label>\n                    <Radio { ...sizeRaido } value=\"m\" /> Medium\n                </label>\n                <label>\n                    <Radio { ...sizeRaido } value=\"l\" /> Large\n                </label>\n                <label>\n                    <Radio { ...sizeRaido } value=\"xl\" /> X-Large\n                </label>\n            </RadioGroup>\n            </fieldset>\n        </React.Fragment>\n    return (\n        <React.Fragment>\n            <h1 tabIndex={0}>Checkout</h1>\n            {renderResults}\n            {deliveryDetails}\n            {orderTotal}\n            <Separator/>\n            {freeBackupSize}\n            <Button onClick={()=>{ swapPage('confirmation') }}>Deliver it!</Button>\n        </React.Fragment>\n    )\n}","import React from 'react';\n\nimport {\n    Button,\n    Box,\n    useDialogState,\n    Dialog,\n    DialogDisclosure,\n    DialogBackdrop,\n} from \"reakit\";\nimport { swapPage } from '../../utils';\nimport { useDispatch } from \"react-redux\";\nimport { clearCart } from '../../redux/actions';\n\nexport default function Confirmation() {\n    setTimeout(()=>{\n        swapPage('arrival');\n    }, 60000)\n    const dispatch = useDispatch();\n    const dialog = useDialogState();\n\n    let _cancelOrder = () => {\n        dialog.hide();\n        dispatch(clearCart());\n        swapPage('search');\n    }\n\n    let _viewOrder = () => {\n        swapPage('checkout');\n    }\n    return (\n        <React.Fragment>\n            <Box tabIndex={0}>\n                <h1>Confirmation</h1>\n                <h2>Your Order is on the way!</h2>\n                <p>Your driver is enroute with your order from the store.</p>\n                <p>Your estimated wait time is now 30 minutes.</p>\n            </Box>\n            <Button onClick={_viewOrder}>View Order</Button>\n            <>\n                <DialogDisclosure {...dialog}>Cancle Order</DialogDisclosure>\n                <DialogBackdrop {...dialog}>\n                    <Dialog {...dialog} tabIndex={0} aria-label=\"Cancel Order\">\n                        <h2>Cancel Order</h2>\n                        <p>Cancelling before your shopper has left for the store will not incure any fees</p>\n                        <Button onClick={_cancelOrder}>Cancel Order</Button>\n                    </Dialog>\n                </DialogBackdrop>\n            </>\n        </React.Fragment>\n    )\n}","import React from 'react';\n\nimport {\n    Button, Box\n} from \"reakit\";\nimport { swapPage } from '../../utils';\n\nexport default function Arrival(){\n    return (\n        <React.Fragment>\n            <Box>\n                <h1>Arrival</h1>\n                <h2>Your Delivery Has Arrived!</h2>\n                <p>Your shopper has arrived and is ready to complete your order, they will wait upt to 5 minutes.</p>\n            </Box>\n            <Button>Call Shopper</Button>\n            <Button onClick={()=> { swapPage('rating') }}>Complete Pick Up</Button>\n        </React.Fragment>\n    )\n}","import React from 'react';\n\nimport {\n    Button,\n    useRadioState,\n    Radio,\n    RadioGroup,\n    useCheckboxState,\n    Checkbox,\n    useDialogState,\n    Dialog,\n    DialogDisclosure,\n    DialogBackdrop,\n} from \"reakit\";\nimport { swapPage } from '../../utils';\nimport { useDispatch } from \"react-redux\";\nimport { clearCart } from '../../redux/actions';\n\nexport default function Rating() {\n  const dispatch = useDispatch();\n  const ratingRadio = useRadioState({ state: '' });\n  const feedbackCheckbox = useCheckboxState({ state: [] });\n  const dialog = useDialogState();\n\n  let _reset = () => {\n    dialog.hide();\n    dispatch(clearCart());\n    swapPage('search');\n  }\n\n    return (\n        <React.Fragment>\n          <h1> RATING </h1>\n          <RadioGroup { ...ratingRadio } aria-label=\"star-rating\">\n            <label>\n              <Radio { ...ratingRadio } value=\"one\" /> 1\n            </label>\n            <label>\n              <Radio { ...ratingRadio } value=\"two\" /> 2\n            </label>\n            <label>\n              <Radio { ...ratingRadio } value=\"three\" /> 3\n            </label>\n            <label>\n              <Radio { ...ratingRadio } value=\"four\" /> 4\n            </label>\n            <label>\n              <Radio { ...ratingRadio } value=\"five\" /> 5\n            </label>\n          </RadioGroup>\n        <h2>Please provide feedback</h2>\n        <fieldset>\n          <label>\n            <Checkbox {...feedbackCheckbox} value=\"friendly\" />\n            Friendly\n          </label>\n          <label>\n            <Checkbox {...feedbackCheckbox} value=\"fast\" />\n            Fast\n          </label>\n          <label>\n            <Checkbox {...feedbackCheckbox} value=\"patient\" />\n            Patient\n          </label>\n          <label>\n            <Checkbox {...feedbackCheckbox} value=\"helpful-tie\" />\n            Helpful\n          </label>\n        </fieldset>\n        <>\n          <DialogDisclosure {...dialog}>Send rating</DialogDisclosure>\n          <DialogBackdrop {...dialog}>\n              <Dialog {...dialog} tabIndex={0} aria-label=\"send-rating\">\n                  <h2>Rating Sent!</h2>\n                  <p>Thank you for rating your shopper!</p>\n                  <Button onClick={_reset}>Return to Search</Button>\n              </Dialog>\n          </DialogBackdrop>\n        </>\n        </React.Fragment>\n    )\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Button } from \"reakit\";\nimport { swapPage } from '../../utils';\nimport { useDispatch } from \"react-redux\";\nimport { addItemToCart } from '../../redux/actions';\n\nexport default function Details() {\n    const itemState = useSelector(state => state.item);\n    const item = itemState.item;\n    const dispatch = useDispatch();\n    console.log(itemState);\n\n    let _addToCart = (result) => {\n      dispatch(addItemToCart(result));\n      swapPage('cart');\n    }\n    return (\n        <React.Fragment>\n            <h2>ITEM DETAILS</h2>\n            <img alt={item.imageAlt()} src='' />\n            <h3> {item.title} </h3>\n            <h4> {item.store} </h4>\n            <h4> Size: {item.size} </h4>\n            <h4> {item.price} </h4>\n            <h4> In Stock: { Math.floor(Math.random() * 150) }</h4>\n            <h5>Description</h5>\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n            <Button onClick={()=>{_addToCart(item)}}>Reserve Item</Button>\n            <Button onClick={()=>{swapPage('results')}}>Return to Results</Button>\n        </React.Fragment>\n    );\n}","import React from 'react';\nimport {\n  Switch,\n  Route,\n  withRouter\n} from \"react-router-dom\";\n\nimport Search from './pages/search/SearchPage';\nimport Results from './pages/results/ResultsPage';\nimport Cart from './pages/cart/CartPage';\nimport Checkout from './pages/checkout/CheckoutPage';\nimport Confirmation from './pages/confirmation/ConfirmationPage';\nimport Arrival from './pages/arrival/ArrivalPage';\nimport Rating from './pages/rating/RatingPage';\nimport Details from './pages/details/DetailsPage';\n\nimport './App.css';\n\nclass App extends React.Component {\n  render () {\n    return (\n      <Switch>\n        <Route path=\"/search\" exact={true} component={Search} />\n        <Route path=\"/results\" exact={true} component={Results} />\n        <Route path=\"/details\" exact={true} component={Details} />\n        <Route path=\"/cart\" exact={true} component={Cart} />\n        <Route path=\"/checkout\" exact={true} component={Checkout} />\n        <Route path=\"/confirmation\" exact={true} component={Confirmation} />\n        <Route path=\"/arrival\" exact={true} component={Arrival} />\n        <Route path=\"/rating\" exact={true} component={Rating} />\n     </Switch>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducers from './redux/reducers';\nimport history from './history';\nimport {\n  Router,\n} from \"react-router-dom\";\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n  reducers,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() \n  );\n\nReactDOM.render(\n  <Router history={history}>\n    <Provider store={store}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </Provider>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}